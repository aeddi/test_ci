---
name: Release
on:
  pull_request:

jobs:
  check_version:
    name: Check version change
    runs-on: ubuntu-latest
    steps:
      - name: Checkout changes
        uses: actions/checkout@v2

      - name: Set CUR_VERSION
        run: |
          sudo apt-get install python3-setuptools
          pip3 install -r packages/utils/yaml_get/requirements.txt
          export GET_BIN=packages/utils/yaml_get/yaml_get.py
          export GET_KEY=global.version
          echo "##[set-env name=CUR_VERSION;]$($GET_BIN $GET_KEY)"

      - name: Checkout master
        uses: actions/checkout@v2
        with:
            ref: master

      - name: Set PREV_VERSION
        run: |
          export GET_BIN=packages/utils/yaml_get/yaml_get.py
          export GET_KEY=global.version
          echo "##[set-env name=PREV_VERSION;]$($GET_BIN $GET_KEY)"

      - name: Check version change
        run:
          if [[ "$CUR_VERSION" == "$PREV_VERSION" ]]; then
            echo "Version is unchanged"; exit 1;
          elif [[ ! "$CUR_VERSION" > "$PREV_VERSION" ]]; then
            echo "Current version isn't greater than previous"; exit 1;
          fi

  check_release:
    name: Check release notes
    runs-on: ubuntu-latest
    needs: check_version
    strategy:
      matrix:
        files: [
          android_bridge.md,
          android_example.md,
          go_core.md,
          ios_bridge.md,
          ios_example.md,
        ]
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
            ref: master

      - name: Checkout changes
        uses: actions/checkout@v2

      - name: Set CUR_VERSION
        run: |
          sudo apt-get install python3-setuptools
          pip3 install -r packages/utils/yaml_get/requirements.txt
          export GET_BIN=packages/utils/yaml_get/yaml_get.py
          export GET_KEY=global.version
          echo "##[set-env name=CUR_VERSION;]$($GET_BIN $GET_KEY)"

      - name: Check release note files
        working-directory: packages/release_notes
        run:
          export RN=${{ matrix.files }};
          export RN_VERSION=$(grep '^## ' $RN | head -n1 | cut -d' ' -f2);
          if [[ "$RN_VERSION" != "$CUR_VERSION" ]]; then
            echo "Last version mismatch for $RN"; exit 1;
          fi
