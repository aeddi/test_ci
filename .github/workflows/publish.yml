---
name: Publish
on:
  push:
    tags:
      - 'v*'

jobs:
  gen_doc:
    name: Generate docs and changelog
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout changes
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Set GOPATH in env
        run: |
          echo "##[set-env name=GOPATH;]$(go env GOPATH)"
          echo "##[add-path]$(go env GOPATH)/bin"
          mkdir -p $(go env GOPATH)/src/github.com/ipfs-shipyard
          ln -s $PWD $(go env GOPATH)/src/github.com/ipfs-shipyard/gomobile-ipfs
        shell: bash

      - name: Restore Go mod cache
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go/go.sum') }}

      - name: Install Go mod
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: go
        run: GO111MODULE=on go mod vendor

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set TARGET_SDK in env
        run: |
          pip3 install -r packages/utils/yaml_get/requirements.txt
          export GET_BIN=packages/utils/yaml_get/yaml_get.py
          export GET_KEY=global.android.target_sdk_version
          echo "##[set-env name=TARGET_SDK;]$($GET_BIN $GET_KEY)"

      - name: Install Android SDK
        run:
          SDK_MAN=$HOME/Library/Android/sdk/tools/bin/sdkmanager;
          BTOOLS=$($SDK_MAN --list | grep "build-tools;$TARGET_SDK");
          BTOOL=$(echo $BTOOLS | tail -n1 | cut -d'|' -f1 | tr -d ' ');
          PLATFORMS=$($SDK_MAN --list | grep "platforms;android-$TARGET_SDK");
          PLATFORM=$(echo $PLATFORMS | tail -n1 | cut -d'|' -f1 | tr -d ' ');

          $SDK_MAN --install "$BTOOL" platform-tools "$PLATFORM" ndk-bundle
          > /dev/null

      - name: Build Core
        working-directory: packages
        run: make build_core

      - name: Generate docs
        run: |
          gem install jazzy
          rm -rf docs
          cd packages && make docgen

      - name: Set MERGE_SHA in env
        run: |
          export SHA=$(git log --pretty=format:'%p' -1 | tr -d '[:space:]')
          echo "##[set-env name=MERGE_SHA;]$SHA"
          echo "$SHA"

      - name: Download changelog artifact
        uses: actions/download-artifact@v1
        with:
          name: changelog-v${{ env.MERGE_SHA }}
          path: /tmp/changelog_nc

      - name: Generate changelog
        run:
          cat /tmp/changelog_nc >> packages/release_notes/changelog

      - name: Push docs and changelog
        uses: github-actions-x/commit@v2.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: master
          commit-message: 'docs: generate docs and changelog'
          files: docs packages/release_notes/changelog

  # publish:
    # name: Publish Bridge and Core
    # runs-on: macos-latest
    # timeout-minutes: 30
    # steps:
      # - name: Checkout changes
      #   uses: actions/checkout@v2

      # - name: Install Go
      #   uses: actions/setup-go@v1
      #   with:
      #     go-version: 1.14

      # - name: Set GOPATH in env
      #   run: |
      #     echo "##[set-env name=GOPATH;]$(go env GOPATH)"
      #     echo "##[add-path]$(go env GOPATH)/bin"
      #     mkdir -p $(go env GOPATH)/src/github.com/ipfs-shipyard
      #     ln -s $PWD $(go env GOPATH)/src/github.com/ipfs-shipyard/gomobile-ipfs
      #   shell: bash

      # - name: Restore Go mod cache
      #   id: cache
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('go/go.sum') }}

      # - name: Install Go mod
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   working-directory: go
      #   run: GO111MODULE=on go mod vendor

      # - name: Install Java
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 1.8

      # - name: Set TARGET_SDK in env
      #   run: |
      #     pip3 install -r packages/utils/yaml_get/requirements.txt
      #     export GET_BIN=packages/utils/yaml_get/yaml_get.py
      #     export GET_KEY=global.android.target_sdk_version
      #     echo "##[set-env name=TARGET_SDK;]$($GET_BIN $GET_KEY)"

      # - name: Install Android SDK
      #   run:
      #     SDK_MAN=$HOME/Library/Android/sdk/tools/bin/sdkmanager;
      #     BTOOLS=$($SDK_MAN --list | grep "build-tools;$TARGET_SDK");
      #     BTOOL=$(echo $BTOOLS | tail -n1 | cut -d'|' -f1 | tr -d ' ');
      #     PLATFORMS=$($SDK_MAN --list | grep "platforms;android-$TARGET_SDK");
      #     PLATFORM=$(echo $PLATFORMS | tail -n1 | cut -d'|' -f1 | tr -d ' ');

      #     $SDK_MAN --install "$BTOOL" platform-tools "$PLATFORM" ndk-bundle
      #     > /dev/null

      # - name: Update Cocoapods
      #   run: |
      #     gem install cocoapods
      #     pod setup

      # - name: Generate Semantic Release version
      #   uses: cycjimmy/semantic-release-action@v2
      #   id: semantic
      #   with:
      #     dry_run: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish Android/iOS Bridge and Core
      #   working-directory: packages
      #   env:
      #     BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      #     BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
      #     BINTRAY_GPG_PASS: ${{ secrets.BINTRAY_GPG_PASS }}
      #     GOMOBILE_IPFS_VERSION: ${{ env.VERSION }}
      #   run: |
      #     make publish_core.android
      #     make publish_bridge.android
      #     make publish_core.ios
      #     make publish_bridge.ios
